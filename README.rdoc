= Moqueue
Moqueue is a library for mocking the various objects that make up the ruby AMQP[http://github.com/tmm1/amqp] library. It allows you to use the AMQP library naturally and test your code easily without running an AMQP broker. If you want a higher level of control, you can use your favorite mocking and stubbing library to modify individual calls to MQ.queue and the like so that they return Moqueue's mock up versions. If you want to go all-in, you can tell Moqueue to overload the MQ class. This allows you to use MQ pretty much as normal, while Moqueue works behind the scenes to wire its mock objects to wire everything together.

= Getting started

  require "moqueue"
  overload_amqp
  
  mq = MQ.new
  => #<MQ:0x1197ae8>
  queue = mq.queue("mocktacular")
  => #<Moqueue::MockQueue:0x1194550 @name="mocktacular">
  topic = mq.topic("lolz")
  => #<Moqueue::MockExchange:0x11913dc @topic="lolz">
  queue.bind(topic, :key=> "cats.*")
  => #<Moqueue::MockQueue:0x1194550 @name="mocktacular">
  queue.subscribe {|header, msg| puts [header.routing_key, msg]}
  => nil
  topic.publish("eatin ur foodz", :key => "cats.inUrFridge")
  # cats.inUrFridge
  # eatin ur foodz
  
Note that in this example, we didn't have to deal with <tt>AMQP.start</tt> or <tt>EM.run</tt>. This should be ample evidence that you should run higher level tests without any mocks or stubs so you can be sure everything works with real MQ objects. With that said, <tt>#overload_amqp</tt> does overload the <tt>AMQP.start</tt> method, so you can use Moqueue for mid-level testing if desired. Have a look at the spec/examples directory to see Moqueue running some of AMQP's examples in full-mocking mode for more demonstration of this.

= What's Working?
As you can tell from the example above, quite a bit is working. This includes direct exchanges where you call <tt>#publish</tt> and <tt>#subscribe</tt> on the same queue, acknowledgements, and topic queues.

What's not working includes fanout exchanges and RPC exchanges. There may also be some quirks with the routing key matching algorithm, and receiving acks when using topic exchanges. 

As always, you're invited to git yer fork on if you want to work on any of these.